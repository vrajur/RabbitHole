
scalar Timestamp
scalar NodeRef
scalar Location

enum EventType {
	NAVIGATE_TO
	TOGGLE_PAGE_FLAG
}

interface LoggingEvent {
	id: String
	eventType: EventType
	timestamp: Timestamp
}

type NavigateToEvent implements LoggingEvent {
	id: String
	eventType: EventType
	timestamp: Timestamp
	from: NodeRef
	to: NodeRef
}

type TogglePageFlagEvent implements LoggingEvent {
	id: String
	eventType: EventType
	timestamp: Timestamp
	node: NodeRef
}

union ActionEvent = NavigateToEvent | TogglePageFlagEvent 

type Markup {
	id: String
}

type NodeVisit {
	id: String
	nodeId: String
	timestamp: Timestamp
	domCache: String
	pageTextCache: String
	faviconPath: String
	markups: [Markup]
	location: Location
	actionEvents: [ActionEvent]
}

interface BaseNode {
	id: String
	url: String
	isStarred: Boolean
	visits: [NodeVisit]
}

type Node implements BaseNode {
	id: String
	url: String
	isStarred: Boolean
	visits: [NodeVisit]
	timestamp: Timestamp
}

type SearchNode implements BaseNode {
	id: String
	url: String
	isStarred: Boolean
	visits: [NodeVisit]
	searchQuery: String
}

union NodeUnion = Node | SearchNode


type Query {
	hello: String
	getAllNodes: [Node]
	getMostRecentNodes(n: Int): [Node]
	getLastNodeVisitId(nodeId: String): String
	getNodeVisit(nodeVisitId: String): NodeVisit
}

type Mutation {
	addNode(url: String) : Node 
	getOrCreateNode(url: String) : Node!
	addNodeVisit(nodeId: String): NodeVisit
	addNodeVisitToNode(nodeId: String, nodeVisitId: String): Node
	setNodeIsStarredValue(nodeId: String, isStarredValue: Boolean) : Node 
	addDomCache(nodeVisitId: String, domCache: String) : NodeVisit
	addFaviconPath(nodeVisitId: String, faviconPath: String) : NodeVisit
}